MY TODOS:

Tags taggable
Sortable table for listenings?

2. Make at least 1 and 2 from sprint 2 work?
4. Road tags seems broken?

Found (and mostly fixed) a bug, if the PHP controller stores a questionairre but doesn't return correctly, JS will try to
re-store and get a duplicate which errors constantly. We can check the returned error to see if it is a collision, and
if it is, smart de-dupe manually in the JS. ALSO, check this same behaviour across other models! I "fixed" it in PHP
with DB transactions. Item only stored when the response is prepped.

SPRINT THE SECOND:

2. Add area field, change 'rough location' to 'road' and have roads belong to areas
  - FOR RELEASE:
    Apply migrations (this will add areas, locations and location_id to the Interview model) `php artisan migrate`
    Run artisan command to migrate current locations. This will convert existing locations to locations in the 'Bodmin' area and link them to the interviews.
    `php artisan command:migrate_locations`
    AFTERWARDS:
    create a migration to remove (or rename?) the location column from interviews. It's now defunct and only likely to clash with the location associations

1. Capture personal information into its own table and link to interview
3. Stats page, select area, road (or all) and tags (or all?) with some options an that. Display chart (chart.js?) make it look gud.
4. User roles (view only, record and review, review with personal details, admin)
5. Annotate completed interviews. Text field for general input and an extra tag field for follow-up.
6. Change / recover password

WTF Per Minute Reduction Strategies:

* It's hard to discern the data structures in place, maybe a separation of concerns issue or better docs in the models would sort it out? Not sure how to go about this in Angular properly.
