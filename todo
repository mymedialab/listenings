SPRINT THE SECOND:

2. Add area field, change 'rough location' to 'road' and have roads belong to areas
  - FOR RELEASE:
    Apply migrations (this will add areas, locations and location_id to the Interview model)
    Run artisan command to migrate current locations. This will convert existing locations to locations in the 'Bodmin' area and link them to the interviews.
    AFTERWARDS:
    create a migration to remove (or rename?) the location column from interviews. It's now defunct and only likely to clash with the location associations

1. Capture personal information into its own table and link to interview
3. Stats page, select area, road (or all) and tags (or all?) with some options an that. Display chart (chart.js?) make it look gud.

----- cap here after 4 days!

4. User roles (view only, record and review, review with personal details, admin)
5. Annotate completed interviews. Text field for general input and an extra tag field for follow-up.

PREVIOUSLY:

For fetches, setup a short timeout. (For put's  / post's just let it keep trying)
Nav menu as per easterschool
Change password / recover password
Also; add people as another (searchable, linked) entity.

WTF Per Minute Reduction Strategies:

* It's hard to discern the data structures in place, maybe a separation of concerns issue or better docs in the models would sort it out? Not sure how to go about this in Angular properly.

* The services should probably be separated into models backed by actual services, mostly because the promises and things from the database make for very hard-to-read code and often quite convoluted app flow, it would be nice to be able to abtract some of that away (same for http requests)

* Schemaless migrations are surprisingly hard to keep track of so it's quite hard to cover all the cases where a device may be sat there with unsynced data already which should work correctly with the new version despite it's quite large architecture changes. Remote logging should help us identify these occurrances now, but it'd be better to account for them ahead of time.
